/* This file was generated by ODB, object-relational mapping (ORM)
 * compiler for C++.
 */

DROP FOREIGN TABLE IF EXISTS "f_GraphClass" CASCADE;

CREATE FOREIGN TABLE "f_GraphClass" (
  "graphClassName" VARCHAR(255) NOT NULL ,
  "directGraph" BOOLEAN NOT NULL DEFAULT '0',
  "acyclicGraph" BOOLEAN NOT NULL DEFAULT '0'
)
SERVER cstore_server
OPTIONS(filename '/opt/citusdb/4.0/cstore/f_GraphClass.cstore', compression 'pglz');

/* This file was generated by ODB, object-relational mapping (ORM)
 * compiler for C++.
 */

DROP FOREIGN TABLE IF EXISTS "f_ObjectClass" CASCADE;

CREATE FOREIGN TABLE "f_ObjectClass" (
  "objectClassName" VARCHAR(255) NOT NULL 
)
SERVER cstore_server
OPTIONS(filename '/opt/citusdb/4.0/cstore/f_ObjectClass.cstore', compression 'pglz');

/* This file was generated by ODB, object-relational mapping (ORM)
 * compiler for C++.
 */

DROP FOREIGN TABLE IF EXISTS "f_Graph" CASCADE;

CREATE FOREIGN TABLE "f_Graph" (
  "idGraph" BIGSERIAL NOT NULL ,
  "objectName" VARCHAR(255) NOT NULL,
  "cumulativeMass" INTEGER NOT NULL,
  "DAGCost" DOUBLE PRECISION NOT NULL,
  "MaxTSVDimension" INTEGER NOT NULL,
  "totalTSVSum" DOUBLE PRECISION NOT NULL,
  "shape_xMax" DOUBLE PRECISION NOT NULL,
  "shape_xMin" DOUBLE PRECISION NOT NULL,
  "shape_yMax" DOUBLE PRECISION NOT NULL,
  "shape_yMin" DOUBLE PRECISION NOT NULL,
  "shape_Height" DOUBLE PRECISION NOT NULL,
  "shape_Width" DOUBLE PRECISION NOT NULL,
  "XMLSignature" TEXT NOT NULL,
  "refGraphClass" VARCHAR(255) NOT NULL,
  "refObjectClass" VARCHAR(255) NOT NULL
)
SERVER cstore_server
OPTIONS(filename '/opt/citusdb/4.0/cstore/f_Graph.cstore', compression 'pglz');

/* This file was generated by ODB, object-relational mapping (ORM)
 * compiler for C++.
 */

DROP FOREIGN TABLE IF EXISTS "f_Node" CASCADE;

CREATE FOREIGN TABLE "f_Node" (
  "idNode" BIGSERIAL NOT NULL ,
  "index" INTEGER NOT NULL DEFAULT '-1',
  "label" VARCHAR(255) NOT NULL DEFAULT '-1',
  "level" INTEGER NOT NULL DEFAULT '-1',
  "mass" INTEGER NOT NULL DEFAULT '-1',
  "type" INTEGER NOT NULL DEFAULT '-1',
  "role" INTEGER NOT NULL DEFAULT 0,
  "pointCount" INTEGER NOT NULL DEFAULT '-1',
  "subtreeCost" DOUBLE PRECISION NOT NULL DEFAULT '-1',
  "tsvNorm" DOUBLE PRECISION NOT NULL DEFAULT '-1',
  "refGraph" BIGINT NOT NULL
)
SERVER cstore_server
OPTIONS(filename '/opt/citusdb/4.0/cstore/Node.cstore', compression 'pglz');

/* This file was generated by ODB, object-relational mapping (ORM)
 * compiler for C++.
 */

DROP FOREIGN TABLE IF EXISTS "f_Edge" CASCADE;

CREATE FOREIGN TABLE "f_Edge" (
  "idEdge" BIGSERIAL NOT NULL ,
  "weight" INTEGER NOT NULL DEFAULT '-1',
  "sourceDFSIndex" INTEGER NOT NULL DEFAULT '-1',
  "targetDFSIndex" INTEGER NOT NULL DEFAULT '-1',
  "source" BIGINT NOT NULL,
  "target" BIGINT NOT NULL,
  "refGraph" BIGINT NOT NULL
)
SERVER cstore_server
OPTIONS(filename '/opt/citusdb/4.0/cstore/Edge.cstore', compression 'pglz');


/* This file was generated by ODB, object-relational mapping (ORM)
 * compiler for C++.
 */

DROP FOREIGN TABLE IF EXISTS "f_Point" CASCADE;

CREATE FOREIGN TABLE "f_Point" (
  "idPoint" BIGSERIAL NOT NULL ,
  "xCoord" DOUBLE PRECISION NOT NULL DEFAULT '-1',
  "yCoord" DOUBLE PRECISION NOT NULL DEFAULT '-1',
  "radius" DOUBLE PRECISION NOT NULL DEFAULT '-1',
  "speed" DOUBLE PRECISION NOT NULL DEFAULT '-1',
  "dr_ds" DOUBLE PRECISION NOT NULL DEFAULT '-1',
  "dr" DOUBLE PRECISION NOT NULL DEFAULT '-1',
  "direction" INTEGER NOT NULL DEFAULT -1,
  "refGraph" BIGINT NOT NULL,
  "refNode" BIGINT NOT NULL
)
SERVER cstore_server
OPTIONS(filename '/opt/citusdb/4.0/cstore/Point.cstore', compression 'pglz');

  
CREATE OR REPLACE FUNCTION public.updateColumnData() RETURNS void AS '
    INSERT INTO "f_GraphClass" SELECT * from "GraphClass" as ori WHERE ori."graphClassName" NOT IN (Select "graphClassName" from "f_GraphClass");
	INSERT INTO "f_ObjectClass" SELECT * from "ObjectClass" as ori WHERE ori."objectClassName" NOT IN (Select "objectClassName" from "f_ObjectClass");
	INSERT INTO "f_Graph" SELECT * from "Graph" as ori where ori."idGraph" NOT IN (Select "idGraph" from "f_Graph");
	INSERT INTO "f_Node" SELECT * from "Node" as ori where ori."idNode" NOT IN (Select "idNode" from "f_Node");
	INSERT INTO "f_Edge" SELECT * from "Edge" as ori where ori."idEdge" NOT IN (Select "idEdge" from "f_Edge");
	INSERT INTO "f_Point" SELECT * from "Point" as ori where ori."idPoint" NOT IN (Select "idPoint" from "f_Point");
' LANGUAGE SQL;
ALTER FUNCTION public.updateColumnData() OWNER TO postgres;
  
  

/* This view is used to perform the Machine Learning approach.
 * Created by Jonathan DEKHTIAR
 */
 
DROP VIEW IF EXISTS "f_learning_data";

CREATE VIEW "f_learning_data" AS
  SELECT
	g."idGraph",
	g."refObjectClass", 
	g."cumulativeMass", 
	g."DAGCost",
	g."MaxTSVDimension", 
	g."totalTSVSum", 
	g."shape_xMax", 
	g."shape_xMin", 
	g."shape_yMax", 
	g."shape_yMin", 
	g."shape_Height", 
	g."shape_Width",
	n."nodeCount",
	e."edgeCount",
	p."pointCount",
	n."avg_pointCount" as "avg_pointPerNode", 
	n."avg_level", 
	n."avg_mass", 
	n."avg_type" as "avg_NodeType", 
	n."avg_role",
	n."avg_subtreeCost", 
	n."avg_tsvNorm",
	p."avg_xCoord", 
	p."avg_yCoord", 
	p."avg_radius", 
	p."avg_speed", 
	p."avg_dr_ds", 
	p."avg_dr", 
	p."avg_direction"
FROM 
	"f_Graph" as g
LEFT JOIN
	(SELECT 
		count(*) as "nodeCount" , 
		avg("level") as "avg_level", 
		avg("mass") as "avg_mass", 
		avg("type") as "avg_type", 
		avg("role") as "avg_role", 
		avg("pointCount") as "avg_pointCount", 
		avg("subtreeCost") as "avg_subtreeCost", 
		avg("tsvNorm") as "avg_tsvNorm",
		"refGraph"
	FROM "f_Node"
	GROUP BY "refGraph") as n
ON g."idGraph" = n."refGraph"

LEFT JOIN
	(SELECT 
		count(*) as "edgeCount",
		"refGraph"
	FROM "f_Edge" 
	GROUP BY  "refGraph") as e
ON g."idGraph" = e."refGraph"

LEFT JOIN
	(SELECT 
		count(*) as "pointCount",
		avg("xCoord") as "avg_xCoord", 
		avg("yCoord") as "avg_yCoord", 
		avg("radius") as "avg_radius", 
		avg("speed") as "avg_speed", 
		avg("dr_ds") as "avg_dr_ds", 
		avg("dr")as "avg_dr", 
		avg("direction") as "avg_direction", 
		"refGraph" 
	FROM "f_Point" 
	GROUP BY "refGraph") as p
ON g."idGraph" = p."refGraph"

ORDER BY "idGraph";