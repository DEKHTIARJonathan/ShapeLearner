This example shows how to use optimistic concurrency in ODB.

The example consists of the following files:

person.hxx
  Header file defining the 'person' persistent class. Besides the standard
  persistent class pragmas, this definition also uses the 'optimistic'
  pragma to indicate to the ODB compiler that the class must support
  optimistic concurrency. It also uses the 'version' pragma to specify
  which data member will contain the object version.

person-odb.hxx
person-odb.ixx
person-odb.cxx
person.sql
  The first three files contain the database support code and the last file
  contains the database schema for the person.hxx header.

  These files are generated by the ODB compiler from person.hxx using the
  following command line:

  odb -d <database> --generate-schema person.hxx

  Where <database> stands for the database system we are using, for example,
  'mysql'.

database.hxx
  Contains the create_database() function which instantiates the concrete
  database class corresponding to the database system we are using.

driver.cxx
  Driver for the example. It includes the person.hxx and person-odb.hxx
  headers to gain access to the persistent classes and their database support
  code. It also includes database.hxx for the create_database() function
  declaration.

  In main() the driver first calls create_database() to obtain the database
  instance and persists a sample 'person' object. It then emulates the
  parallel execution of two processes that try to concurrently update or
  delete this object. For each step the driver prints the versions of the
  object as seen by each process.

To compile and link the example manually from the command line we can use
the following commands (using  MySQL as an example; replace 'c++' with your
C++ compiler name):

c++ -c person-odb.cxx
c++ -DDATABASE_MYSQL -c driver.cxx
c++ -o driver driver.o person-odb.o -lodb-mysql -lodb

To run the example we may first need to create the database schema (for some
database systems, such as SQLite, the schema is embedded into the generated
code which makes this step unnecessary). Using MySQL as an example, this
can be achieved with the following command:

mysql --user=odb_test --database=odb_test < person.sql

Here we use 'odb_test' as the database login and also 'odb_test' as the
database name.

Once the database schema is ready, we can run the example (using MySQL as
the database):

./driver --user odb_test --database odb_test
