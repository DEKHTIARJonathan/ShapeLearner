This example shows how to define and use views in ODB. It includes views
that show how to load a subset of data members from objects or columns
from tables, perform aggregate queries, and join multiple objects and
tables using object relationships and custom join conditions.

The example uses the shared_ptr smart pointer from TR1 and requires a C++
compiler with TR1 support or an external TR1 implementation, such as the
one provided by Boost.

The example consists of the following files:

employee.hxx
  Header file defining the 'country', 'employer', and 'employee' persistent
  classes. The example also uses the "legacy" 'employee_extra' table that is
  not mapped to a persistent class.

  After the persistent classes, this header defines a number of views that
  show how to obtain various information from the above object model.

employee-odb.hxx
employee-odb.ixx
employee-odb.cxx
employee.sql
  The first three files contain the database support code and the last file
  contains the database schema for the employee.hxx header.

  These files are generated by the ODB compiler from employee.hxx using the
  following command line:

  odb -d <database> --generate-schema --generate-query \
  --default-pointer std::tr1::shared_ptr --generate-session employee.hxx

  Where <database> stands for the database system we are using, for example,
  'mysql'.

  The --default-pointer option is used to make TR1 shared_ptr the default
  object pointer. The --generate-session option is used to enable session
  support for all the objects which is required to use object loading views.

database.hxx
  Contains the create_database() function which instantiates the concrete
  database class corresponding to the database system we are using.

driver.cxx
  Driver for the example. It includes the employee.hxx and employee-odb.hxx
  headers to gain access to the persistent classes and views as well as
  their database support code. It also includes database.hxx for the
  create_database() function declaration.

  In main() the driver first calls create_database() to obtain the database
  instance. It then creates the legacy 'employee_extra' table and proceeds
  to populate the database with a number of 'country', 'employer', and
  'employee' objects. Once this is done, the driver uses views defined in
  employee.hxx to load and print various information about the object model.

To compile and link the example manually from the command line we can use
the following commands (using  MySQL as an example; replace 'c++' with your
C++ compiler name):

c++ -c employee-odb.cxx
c++ -DDATABASE_MYSQL -c driver.cxx
c++ -o driver driver.o employee-odb.o -lodb-mysql -lodb

To run the example we may first need to create the database schema (for some
database systems, such as SQLite, the schema is embedded into the generated
code which makes this step unnecessary). Using MySQL as an example, this
can be achieved with the following command:

mysql --user=odb_test --database=odb_test < employee.sql

Here we use 'odb_test' as the database login and also 'odb_test' as the
database name.

Once the database schema is ready, we can run the example (using MySQL as
the database):

./driver --user odb_test --database odb_test
