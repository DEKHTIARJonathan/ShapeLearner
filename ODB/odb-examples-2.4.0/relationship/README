This example shows how to declare and use unidirectional to-one and to-many
relationships between persistent objects.

The example uses the shared_ptr smart pointer from TR1 and requires a C++
compiler with TR1 support or an external TR1 implementation, such as the
one provided by Boost.

The example consists of the following files:

employee.hxx
  Header file defining the 'employee', 'employer', and 'project' persistent
  classes as well as the employee-employer (to-one) and employee-project (to-
  many) unidirectional relationships between them.

employee-odb.hxx
employee-odb.ixx
employee-odb.cxx
employee.sql
  The first three files contain the database support code and the last file
  contains the database schema for the employee.hxx header.

  These files are generated by the ODB compiler from employee.hxx using the
  following command line:

  odb -d <database> --generate-schema --generate-query --generate-session \
  --default-pointer std::tr1::shared_ptr employee.hxx

  Where <database> stands for the database system we are using, for example,
  'mysql'.

  The --generate-session option is used to enable session support for all
  the persistent classes in employee.hxx. The --default-pointer option is
  used to make TR1 shared_ptr the default object pointer.

database.hxx
  Contains the create_database() function which instantiates the concrete
  database class corresponding to the database system we are using.

driver.cxx
  Driver for the example. It includes the employee.hxx and employee-odb.hxx
  headers to gain access to the persistent classes and their database support
  code. It also includes database.hxx for the create_database() function
  declaration.

  In main() the driver first calls create_database() to obtain the database
  instance. It then creates a number of 'employee', 'employer', and 'project'
  objects, sets the relationships between them, and persists them in the
  database. In the next few transactions the driver loads various objects,
  then accesses and modifies the relationships between them. Finally, the
  driver performs a database query which uses a data member from a related
  object in its criterion.

To compile and link the example manually from the command line we can use
the following commands (using  MySQL as an example; replace 'c++' with your
C++ compiler name):

c++ -c employee-odb.cxx
c++ -DDATABASE_MYSQL -c driver.cxx
c++ -o driver driver.o employee-odb.o -lodb-mysql -lodb

To run the example we may first need to create the database schema (for some
database systems, such as SQLite, the schema is embedded into the generated
code which makes this step unnecessary). Using MySQL as an example, this
can be achieved with the following command:

mysql --user=odb_test --database=odb_test < employee.sql

Here we use 'odb_test' as the database login and also 'odb_test' as the
database name.

Once the database schema is ready, we can run the example (using MySQL as
the database):

./driver --user odb_test --database odb_test
