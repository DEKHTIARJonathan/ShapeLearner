// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#include <odb/pre.hxx>

#include "employee-odb.hxx"

#include <cassert>
#include <cstring>  // std::memcpy
#include <typeinfo>

#include <odb/polymorphic-map.hxx>

#include <odb/pgsql/traits.hxx>
#include <odb/pgsql/database.hxx>
#include <odb/pgsql/transaction.hxx>
#include <odb/pgsql/connection.hxx>
#include <odb/pgsql/statement.hxx>
#include <odb/pgsql/statement-cache.hxx>
#include <odb/pgsql/polymorphic-object-statements.hxx>
#include <odb/pgsql/container-statements.hxx>
#include <odb/pgsql/exceptions.hxx>
#include <odb/pgsql/polymorphic-object-result.hxx>

namespace odb
{
  // person
  //

  const char access::object_traits_impl< ::person, id_pgsql >::
  persist_statement_name[] = "persist_person";

  const char access::object_traits_impl< ::person, id_pgsql >::
  find_statement_name[] = "find_person";

  const char access::object_traits_impl< ::person, id_pgsql >::
  find_discriminator_statement_name[] = "find_discriminator_person";

  const char access::object_traits_impl< ::person, id_pgsql >::
  update_statement_name[] = "update_person";

  const char access::object_traits_impl< ::person, id_pgsql >::
  erase_statement_name[] = "erase_person";

  const char access::object_traits_impl< ::person, id_pgsql >::
  query_statement_name[] = "query_person";

  const char access::object_traits_impl< ::person, id_pgsql >::
  erase_query_statement_name[] = "erase_query_person";

  const unsigned int access::object_traits_impl< ::person, id_pgsql >::
  persist_statement_types[] =
  {
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::text_oid
  };

  const unsigned int access::object_traits_impl< ::person, id_pgsql >::
  find_statement_types[] =
  {
    pgsql::int8_oid
  };

  const unsigned int access::object_traits_impl< ::person, id_pgsql >::
  update_statement_types[] =
  {
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::int8_oid
  };

  struct access::object_traits_impl< ::person, id_pgsql >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      pgsql::connection&,
      image_type&,
      id_image_type&,
      pgsql::binding&,
      pgsql::binding&,
      pgsql::native_binding&,
      const unsigned int*)
    {
    }
  };

  access::object_traits_impl< ::person, id_pgsql >::id_type
  access::object_traits_impl< ::person, id_pgsql >::
  id (const id_image_type& i)
  {
    pgsql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      pgsql::value_traits<
          long unsigned int,
          pgsql::id_bigint >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  access::object_traits_impl< ::person, id_pgsql >::id_type
  access::object_traits_impl< ::person, id_pgsql >::
  id (const image_type& i)
  {
    pgsql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      pgsql::value_traits<
          long unsigned int,
          pgsql::id_bigint >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  access::object_traits_impl< ::person, id_pgsql >::discriminator_type
  access::object_traits_impl< ::person, id_pgsql >::
  discriminator (const image_type& i)
  {
    pgsql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    discriminator_type d;
    {
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        d,
        i.typeid_value,
        i.typeid_size,
        i.typeid_null);
    }

    return d;
  }

  bool access::object_traits_impl< ::person, id_pgsql >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // id_
    //
    t[0UL] = 0;

    // typeid_
    //
    if (t[1UL])
    {
      i.typeid_value.capacity (i.typeid_size);
      grew = true;
    }

    // first_
    //
    if (t[2UL])
    {
      i.first_value.capacity (i.first_size);
      grew = true;
    }

    // last_
    //
    if (t[3UL])
    {
      i.last_value.capacity (i.last_size);
      grew = true;
    }

    return grew;
  }

  void access::object_traits_impl< ::person, id_pgsql >::
  bind (pgsql::bind* b,
        image_type& i,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    std::size_t n (0);

    // id_
    //
    if (sk != statement_insert && sk != statement_update)
    {
      b[n].type = pgsql::bind::bigint;
      b[n].buffer = &i.id_value;
      b[n].is_null = &i.id_null;
      n++;
    }

    // typeid_
    //
    if (sk != statement_update)
    {
      b[n].type = pgsql::bind::text;
      b[n].buffer = i.typeid_value.data ();
      b[n].capacity = i.typeid_value.capacity ();
      b[n].size = &i.typeid_size;
      b[n].is_null = &i.typeid_null;
      n++;
    }

    // first_
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.first_value.data ();
    b[n].capacity = i.first_value.capacity ();
    b[n].size = &i.first_size;
    b[n].is_null = &i.first_null;
    n++;

    // last_
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.last_value.data ();
    b[n].capacity = i.last_value.capacity ();
    b[n].size = &i.last_size;
    b[n].is_null = &i.last_null;
    n++;
  }

  void access::object_traits_impl< ::person, id_pgsql >::
  bind (pgsql::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::person, id_pgsql >::
  init (image_type& i,
        const object_type& o,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    bool grew (false);

    // typeid_
    //
    if (sk == statement_insert)
    {
      const info_type& di (map->find (typeid (o)));

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.typeid_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.typeid_value,
        size,
        is_null,
        di.discriminator);
      i.typeid_null = is_null;
      i.typeid_size = size;
      grew = grew || (cap != i.typeid_value.capacity ());
    }

    // first_
    //
    {
      ::std::string const& v =
        o.first_;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.first_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.first_value,
        size,
        is_null,
        v);
      i.first_null = is_null;
      i.first_size = size;
      grew = grew || (cap != i.first_value.capacity ());
    }

    // last_
    //
    {
      ::std::string const& v =
        o.last_;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.last_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.last_value,
        size,
        is_null,
        v);
      i.last_null = is_null;
      i.last_size = size;
      grew = grew || (cap != i.last_value.capacity ());
    }

    return grew;
  }

  void access::object_traits_impl< ::person, id_pgsql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // id_
    //
    {
      long unsigned int& v =
        o.id_;

      pgsql::value_traits<
          long unsigned int,
          pgsql::id_bigint >::set_value (
        v,
        i.id_value,
        i.id_null);
    }

    // first_
    //
    {
      ::std::string& v =
        o.first_;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.first_value,
        i.first_size,
        i.first_null);
    }

    // last_
    //
    {
      ::std::string& v =
        o.last_;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.last_value,
        i.last_size,
        i.last_null);
    }
  }

  void access::object_traits_impl< ::person, id_pgsql >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      pgsql::value_traits<
          long unsigned int,
          pgsql::id_bigint >::set_image (
        i.id_value, is_null, id);
      i.id_null = is_null;
    }
  }

  access::object_traits_impl< ::person, id_pgsql >::map_type*
  access::object_traits_impl< ::person, id_pgsql >::map;

  const access::object_traits_impl< ::person, id_pgsql >::abstract_info_type
  access::object_traits_impl< ::person, id_pgsql >::info (
    typeid (::person),
    0,
    0);

  const char access::object_traits_impl< ::person, id_pgsql >::persist_statement[] =
  "INSERT INTO \"inh_poly_person\" "
  "(\"id\", "
  "\"typeid\", "
  "\"first\", "
  "\"last\") "
  "VALUES "
  "(DEFAULT, $1, $2, $3) "
  "RETURNING \"id\"";

  const char access::object_traits_impl< ::person, id_pgsql >::find_statement[] =
  "SELECT "
  "\"inh_poly_person\".\"id\", "
  "\"inh_poly_person\".\"typeid\", "
  "\"inh_poly_person\".\"first\", "
  "\"inh_poly_person\".\"last\" "
  "FROM \"inh_poly_person\" "
  "WHERE \"inh_poly_person\".\"id\"=$1";

  const char access::object_traits_impl< ::person, id_pgsql >::
  find_discriminator_statement[] =
  "SELECT "
  "\"inh_poly_person\".\"typeid\" "
  "FROM \"inh_poly_person\" "
  "WHERE \"inh_poly_person\".\"id\"=$1";

  const char access::object_traits_impl< ::person, id_pgsql >::update_statement[] =
  "UPDATE \"inh_poly_person\" "
  "SET "
  "\"first\"=$1, "
  "\"last\"=$2 "
  "WHERE \"id\"=$3";

  const char access::object_traits_impl< ::person, id_pgsql >::erase_statement[] =
  "DELETE FROM \"inh_poly_person\" "
  "WHERE \"id\"=$1";

  const char access::object_traits_impl< ::person, id_pgsql >::query_statement[] =
  "SELECT "
  "\"inh_poly_person\".\"id\", "
  "\"inh_poly_person\".\"typeid\", "
  "\"inh_poly_person\".\"first\", "
  "\"inh_poly_person\".\"last\" "
  "FROM \"inh_poly_person\"";

  const char access::object_traits_impl< ::person, id_pgsql >::erase_query_statement[] =
  "DELETE FROM \"inh_poly_person\"";

  const char access::object_traits_impl< ::person, id_pgsql >::table_name[] =
  "\"inh_poly_person\"";

  void access::object_traits_impl< ::person, id_pgsql >::
  persist (database& db, object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    using namespace pgsql;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_persist, db, &obj, 0);
        return;
      }
    }

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    {
      id_image_type& i (sts.id_image ());
      binding& b (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || b.version == 0)
      {
        bind (b.bind, i);
        sts.id_image_version (i.version);
        b.version++;
      }
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.id_ = id (sts.id_image ());

    id_image_type& i (sts.id_image ());
    init (i, obj.id_);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }
  }

  void access::object_traits_impl< ::person, id_pgsql >::
  update (database& db, const object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    using namespace pgsql;
    using pgsql::update_statement;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_update, db, &obj, 0);
        return;
      }
    }

    pgsql::transaction& tr (pgsql::transaction::current ());
    pgsql::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    const id_type& id (
      obj.id_);
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();
  }

  void access::object_traits_impl< ::person, id_pgsql >::
  erase (database& db, const id_type& id, bool top, bool dyn)
  {
    using namespace pgsql;

    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    if (dyn)
    {
      discriminator_type d;
      root_traits::discriminator_ (sts.root_statements (), id, &d);
      const info_type& pi (root_traits::map->find (d));

      if (!pi.derived (info))
        throw object_not_persistent ();

      pi.dispatch (info_type::call_erase, db, 0, &id);
      return;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();
  }

  void access::object_traits_impl< ::person, id_pgsql >::
  erase (database& db, const object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_erase, db, &obj, 0);
        return;
      }
    }

    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj), true, false);
    callback (db, obj, callback_event::post_erase);
  }

  access::object_traits_impl< ::person, id_pgsql >::pointer_type
  access::object_traits_impl< ::person, id_pgsql >::
  find (database& db, const id_type& id)
  {
    using namespace pgsql;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);
    root_traits::discriminator_type d;

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
      d = root_traits::discriminator (sts.image ());
    }
    else
      root_traits::discriminator_ (sts, id, &d);

    const info_type& pi (root_traits::map->find (d));

    pointer_type p (pi.create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback_event ce (callback_event::pre_load);
      pi.dispatch (info_type::call_callback, db, &obj, &ce);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);

      if (&pi != &info)
      {
        std::size_t d (depth);
        pi.dispatch (info_type::call_load, db, &obj, &d);
      }

      sts.load_delayed (0);
      l.unlock ();
      ce = callback_event::post_load;
      pi.dispatch (info_type::call_callback, db, &obj, &ce);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position (), pi.delayed_loader);

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::person, id_pgsql >::
  find (database& db, const id_type& id, object_type& obj, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (dyn);

    using namespace pgsql;

    const std::type_info& t (typeid (obj));
    const info_type& pi (root_traits::map->find (t));
    return pi.dispatch (info_type::call_find, db, &obj, &id);
  }

  bool access::object_traits_impl< ::person, id_pgsql >::
  reload (database& db, object_type& obj, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (dyn);

    using namespace pgsql;

    const std::type_info& t (typeid (obj));
    const info_type& pi (root_traits::map->find (t));
    return pi.dispatch (info_type::call_reload, db, &obj, 0);
  }

  bool access::object_traits_impl< ::person, id_pgsql >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace pgsql;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::person, id_pgsql >::
  discriminator_ (statements_type& sts,
                  const id_type& id,
                  discriminator_type* pd)
  {
    using namespace pgsql;

    id_image_type& idi (sts.discriminator_id_image ());
    init (idi, id);

    binding& idb (sts.discriminator_id_image_binding ());
    if (idi.version != sts.discriminator_id_image_version () ||
        idb.version == 0)
    {
      bind (idb.bind, idi);
      sts.discriminator_id_image_version (idi.version);
      idb.version++;
    }

    discriminator_image_type& i (sts.discriminator_image ());
    binding& imb (sts.discriminator_image_binding ());

    if (i.version != sts.discriminator_image_version () ||
        imb.version == 0)
    {
      pgsql::bind* b (imb.bind);
      std::size_t n (0);
      {
        b[n].type = pgsql::bind::text;
        b[n].buffer = i.discriminator_value.data ();
        b[n].capacity = i.discriminator_value.capacity ();
        b[n].size = &i.discriminator_size;
        b[n].is_null = &i.discriminator_null;
      }

      sts.discriminator_image_version (i.version);
      imb.version++;
    }

    {
      select_statement& st (sts.find_discriminator_statement ());
      st.execute ();
      auto_result ar (st);
      select_statement::result r (st.fetch ());

      if (r == select_statement::no_data)
      {
        throw object_not_persistent ();
      }
      else if (r == select_statement::truncated)
      {
        bool grew (false);
        bool* t (sts.discriminator_image_truncated ());

        if (t[0UL])
        {
          i.discriminator_value.capacity (i.discriminator_size);
          grew = true;
        }

        if (grew)
          i.version++;

        if (i.version != sts.discriminator_image_version ())
        {
          pgsql::bind* b (imb.bind);
          std::size_t n (0);
          {
            b[n].type = pgsql::bind::text;
            b[n].buffer = i.discriminator_value.data ();
            b[n].capacity = i.discriminator_value.capacity ();
            b[n].size = &i.discriminator_size;
            b[n].is_null = &i.discriminator_null;
          }

          sts.discriminator_image_version (i.version);
          imb.version++;
          st.refetch ();
        }
      }
    }

    if (pd != 0)
    {
      discriminator_type& d (*pd);
      {
        pgsql::value_traits<
            ::std::string,
            pgsql::id_string >::set_value (
          d,
          i.discriminator_value,
          i.discriminator_size,
          i.discriminator_null);
      }
    }
  }

  result< access::object_traits_impl< ::person, id_pgsql >::object_type >
  access::object_traits_impl< ::person, id_pgsql >::
  query (database&, const query_base_type& q)
  {
    using namespace pgsql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        sts.connection (),
        query_statement_name,
        text,
        false,
        true,
        q.parameter_types (),
        q.parameter_count (),
        q.parameters_binding (),
        imb));

    st->execute ();
    st->deallocate ();

    shared_ptr< odb::polymorphic_object_result_impl<object_type> > r (
      new (shared) pgsql::polymorphic_object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::person, id_pgsql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      erase_query_statement_name,
      text,
      q.parameter_types (),
      q.parameter_count (),
      q.parameters_binding ());

    return st.execute ();
  }

  // employee
  //

  const char access::object_traits_impl< ::employee, id_pgsql >::
  persist_statement_name[] = "persist_employee";

  const char* const access::object_traits_impl< ::employee, id_pgsql >::
  find_statement_names[] =
  {
    "find_0_employee",
    "find_1_employee"
  };

  const char access::object_traits_impl< ::employee, id_pgsql >::
  update_statement_name[] = "update_employee";

  const char access::object_traits_impl< ::employee, id_pgsql >::
  erase_statement_name[] = "erase_employee";

  const char access::object_traits_impl< ::employee, id_pgsql >::
  query_statement_name[] = "query_employee";

  const char access::object_traits_impl< ::employee, id_pgsql >::
  erase_query_statement_name[] = "erase_query_employee";

  const unsigned int access::object_traits_impl< ::employee, id_pgsql >::
  persist_statement_types[] =
  {
    pgsql::int8_oid,
    pgsql::bool_oid
  };

  const unsigned int access::object_traits_impl< ::employee, id_pgsql >::
  find_statement_types[] =
  {
    pgsql::int8_oid
  };

  const unsigned int access::object_traits_impl< ::employee, id_pgsql >::
  update_statement_types[] =
  {
    pgsql::bool_oid,
    pgsql::int8_oid
  };

  struct access::object_traits_impl< ::employee, id_pgsql >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      pgsql::connection&,
      image_type&,
      id_image_type&,
      pgsql::binding&,
      pgsql::binding&,
      pgsql::native_binding&,
      const unsigned int*)
    {
    }
  };

  bool access::object_traits_impl< ::employee, id_pgsql >::
  grow (image_type& i,
        bool* t,
        std::size_t d)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // person base
    //
    if (--d != 0)
    {
      if (base_traits::grow (*i.base, t + 1UL))
        i.base->version++;
    }

    // temporary_
    //
    t[0UL] = 0;

    return grew;
  }

  void access::object_traits_impl< ::employee, id_pgsql >::
  bind (pgsql::bind* b,
        const pgsql::bind* id,
        std::size_t id_size,
        image_type& i,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    std::size_t n (0);

    // id_
    //
    if (sk == statement_insert)
    {
      if (id != 0)
        std::memcpy (&b[n], id, id_size * sizeof (id[0]));
      n += id_size;
    }

    // temporary_
    //
    b[n].type = pgsql::bind::boolean_;
    b[n].buffer = &i.temporary_value;
    b[n].is_null = &i.temporary_null;
    n++;

    // id_
    //
    if (sk == statement_update)
    {
      if (id != 0)
        std::memcpy (&b[n], id, id_size * sizeof (id[0]));
      n += id_size;
    }

    // person base
    //
    if (sk == statement_select)
      base_traits::bind (b + n, *i.base, sk);
  }

  bool access::object_traits_impl< ::employee, id_pgsql >::
  init (image_type& i,
        const object_type& o,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    bool grew (false);

    // temporary_
    //
    {
      bool const& v =
        o.temporary_;

      bool is_null (false);
      pgsql::value_traits<
          bool,
          pgsql::id_boolean >::set_image (
        i.temporary_value, is_null, v);
      i.temporary_null = is_null;
    }

    return grew;
  }

  void access::object_traits_impl< ::employee, id_pgsql >::
  init (object_type& o,
        const image_type& i,
        database* db,
        std::size_t d)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // person base
    //
    if (--d != 0)
      base_traits::init (o, *i.base, db);

    // temporary_
    //
    {
      bool& v =
        o.temporary_;

      pgsql::value_traits<
          bool,
          pgsql::id_boolean >::set_value (
        v,
        i.temporary_value,
        i.temporary_null);
    }
  }

  const access::object_traits_impl< ::employee, id_pgsql >::info_type
  access::object_traits_impl< ::employee, id_pgsql >::info (
    typeid (::employee),
    &object_traits_impl< ::person, id_pgsql >::info,
    0,
    "employee",
    &odb::create_impl< ::employee >,
    &odb::dispatch_impl< ::employee, id_pgsql >,
    &statements_type::delayed_loader);

  static const access::object_traits_impl< ::employee, id_pgsql >::entry_type
  polymorphic_entry_for_employee;

  const char access::object_traits_impl< ::employee, id_pgsql >::persist_statement[] =
  "INSERT INTO \"inh_poly_employee\" "
  "(\"id\", "
  "\"temporary\") "
  "VALUES "
  "($1, $2)";

  const char* const access::object_traits_impl< ::employee, id_pgsql >::find_statements[] =
  {
    "SELECT "
    "\"inh_poly_employee\".\"temporary\", "
    "\"inh_poly_person\".\"id\", "
    "\"inh_poly_person\".\"typeid\", "
    "\"inh_poly_person\".\"first\", "
    "\"inh_poly_person\".\"last\" "
    "FROM \"inh_poly_employee\" "
    "LEFT JOIN \"inh_poly_person\" ON \"inh_poly_person\".\"id\"=\"inh_poly_employee\".\"id\" "
    "WHERE \"inh_poly_employee\".\"id\"=$1",

    "SELECT "
    "\"inh_poly_employee\".\"temporary\" "
    "FROM \"inh_poly_employee\" "
    "WHERE \"inh_poly_employee\".\"id\"=$1"
  };

  const std::size_t access::object_traits_impl< ::employee, id_pgsql >::find_column_counts[] =
  {
    5UL,
    1UL
  };

  const char access::object_traits_impl< ::employee, id_pgsql >::update_statement[] =
  "UPDATE \"inh_poly_employee\" "
  "SET "
  "\"temporary\"=$1 "
  "WHERE \"id\"=$2";

  const char access::object_traits_impl< ::employee, id_pgsql >::erase_statement[] =
  "DELETE FROM \"inh_poly_employee\" "
  "WHERE \"id\"=$1";

  const char access::object_traits_impl< ::employee, id_pgsql >::query_statement[] =
  "SELECT\n"
  "\"inh_poly_employee\".\"temporary\",\n"
  "\"inh_poly_person\".\"id\",\n"
  "\"inh_poly_person\".\"typeid\",\n"
  "\"inh_poly_person\".\"first\",\n"
  "\"inh_poly_person\".\"last\"\n"
  "FROM \"inh_poly_employee\"\n"
  "LEFT JOIN \"inh_poly_person\" ON \"inh_poly_person\".\"id\"=\"inh_poly_employee\".\"id\"";

  const char access::object_traits_impl< ::employee, id_pgsql >::erase_query_statement[] =
  "DELETE FROM \"inh_poly_employee\"";

  const char access::object_traits_impl< ::employee, id_pgsql >::table_name[] =
  "\"inh_poly_employee\"";

  void access::object_traits_impl< ::employee, id_pgsql >::
  persist (database& db, object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    using namespace pgsql;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_persist, db, &obj, 0);
        return;
      }
    }

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    if (top)
      callback (db,
                static_cast<const object_type&> (obj),
                callback_event::pre_persist);

    base_traits::persist (db, obj, false, false);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());
    const binding& idb (sts.id_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (idb.version != sts.insert_id_binding_version () ||
        im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, idb.bind, idb.count, im, statement_insert);
      sts.insert_id_binding_version (idb.version);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    if (top)
      callback (db,
                static_cast<const object_type&> (obj),
                callback_event::post_persist);
  }

  void access::object_traits_impl< ::employee, id_pgsql >::
  update (database& db, const object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    using namespace pgsql;
    using pgsql::update_statement;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_update, db, &obj, 0);
        return;
      }
    }

    if (top)
      callback (db, obj, callback_event::pre_update);

    pgsql::transaction& tr (pgsql::transaction::current ());
    pgsql::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    base_traits::update (db, obj, false, false);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    const binding& idb (sts.id_image_binding ());
    binding& imb (sts.update_image_binding ());
    if (idb.version != sts.update_id_binding_version () ||
        im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, idb.bind, idb.count, im, statement_update);
      sts.update_id_binding_version (idb.version);
      sts.update_image_version (im.version);
      imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    if (top)
    {
      callback (db, obj, callback_event::post_update);
      pointer_cache_traits::update (db, obj);
    }
  }

  void access::object_traits_impl< ::employee, id_pgsql >::
  erase (database& db, const id_type& id, bool top, bool dyn)
  {
    using namespace pgsql;

    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    if (dyn)
    {
      discriminator_type d;
      root_traits::discriminator_ (sts.root_statements (), id, &d);

      if (d != info.discriminator)
      {
        const info_type& pi (root_traits::map->find (d));

        if (!pi.derived (info))
          throw object_not_persistent ();

        pi.dispatch (info_type::call_erase, db, 0, &id);
        return;
      }
    }

    if (top)
    {
      id_image_type& i (sts.id_image ());
      init (i, id);

      binding& idb (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || idb.version == 0)
      {
        bind (idb.bind, i);
        sts.id_image_version (i.version);
        idb.version++;
      }
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    base_traits::erase (db, id, false, false);

    if (top)
      pointer_cache_traits::erase (db, id);
  }

  void access::object_traits_impl< ::employee, id_pgsql >::
  erase (database& db, const object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_erase, db, &obj, 0);
        return;
      }
    }

    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj), true, false);
    callback (db, obj, callback_event::post_erase);
  }

  access::object_traits_impl< ::employee, id_pgsql >::pointer_type
  access::object_traits_impl< ::employee, id_pgsql >::
  find (database& db, const id_type& id)
  {
    using namespace pgsql;

    {
      root_traits::pointer_type rp (pointer_cache_traits::find (db, id));

      if (!root_traits::pointer_traits::null_ptr (rp))
        return
          root_traits::pointer_traits::dynamic_pointer_cast<object_type> (rp);
    }

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());
    root_statements_type& rsts (sts.root_statements ());

    statements_type::auto_lock l (rsts);
    root_traits::discriminator_type d;

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
      d = root_traits::discriminator (rsts.image ());
    }
    else
      root_traits::discriminator_ (rsts, id, &d);

    const info_type& pi (
      d == info.discriminator ? info : root_traits::map->find (d));

    root_traits::pointer_type rp (pi.create ());
    pointer_type p (
      root_traits::pointer_traits::static_pointer_cast<object_type> (rp));
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, rp));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement (depth));
      ODB_POTENTIALLY_UNUSED (st);

      callback_event ce (callback_event::pre_load);
      pi.dispatch (info_type::call_callback, db, &obj, &ce);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);

      if (&pi != &info)
      {
        std::size_t d (depth);
        pi.dispatch (info_type::call_load, db, &obj, &d);
      }

      rsts.load_delayed (0);
      l.unlock ();
      ce = callback_event::post_load;
      pi.dispatch (info_type::call_callback, db, &obj, &ce);
      pointer_cache_traits::load (ig.position ());
    }
    else
      rsts.delay_load (id, obj, ig.position (), pi.delayed_loader);

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::employee, id_pgsql >::
  find (database& db, const id_type& id, object_type& obj, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (dyn);

    using namespace pgsql;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        return pi.dispatch (info_type::call_find, db, &obj, &id);
      }
    }

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());
    root_statements_type& rsts (sts.root_statements ());

    statements_type::auto_lock l (rsts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement (depth));
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    rsts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::employee, id_pgsql >::
  reload (database& db, object_type& obj, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (dyn);

    using namespace pgsql;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        return pi.dispatch (info_type::call_reload, db, &obj, 0);
      }
    }

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());
    root_statements_type& rsts (sts.root_statements ());

    statements_type::auto_lock l (rsts);

    const id_type& id  (
      obj.id_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement (depth));
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    rsts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::employee, id_pgsql >::
  find_ (statements_type& sts,
         const id_type* id,
         std::size_t d)
  {
    using namespace pgsql;

    if (d == depth)
    {
      id_image_type& i (sts.id_image ());
      init (i, *id);

      binding& idb (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || idb.version == 0)
      {
        bind (idb.bind, i);
        sts.id_image_version (i.version);
        idb.version++;
      }
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding (d));

    if (imb.version == 0 ||
        check_version (sts.select_image_versions (), im))
    {
      bind (imb.bind, 0, 0, im, statement_select);
      update_version (sts.select_image_versions (),
                      im,
                      sts.select_image_bindings ());
    }

    select_statement& st (sts.find_statement (d));

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated (), d))
        im.version++;

      if (check_version (sts.select_image_versions (), im))
      {
        bind (imb.bind, 0, 0, im, statement_select);
        update_version (sts.select_image_versions (),
                        im,
                        sts.select_image_bindings ());
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::employee, id_pgsql >::
  load_ (statements_type& sts,
         object_type& obj,
         bool reload,
         std::size_t d)
  {
    ODB_POTENTIALLY_UNUSED (reload);

    if (--d != 0)
      base_traits::load_ (sts.base_statements (), obj, reload);
  }

  void access::object_traits_impl< ::employee, id_pgsql >::
  load_ (database& db, root_type& r, std::size_t d)
  {
    using namespace pgsql;

    object_type& obj (static_cast<object_type&> (r));
    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    d = depth - d;

    if (!find_ (sts, 0, d))
      throw object_not_persistent ();

    select_statement& st (sts.find_statement (d));
    ODB_POTENTIALLY_UNUSED (st);

    init (obj, sts.image (), &db, d);
    load_ (sts, obj, false, d);
  }

  result< access::object_traits_impl< ::employee, id_pgsql >::object_type >
  access::object_traits_impl< ::employee, id_pgsql >::
  query (database&, const query_base_type& q)
  {
    using namespace pgsql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding (depth));

    if (imb.version == 0 ||
        check_version (sts.select_image_versions (), im))
    {
      bind (imb.bind, 0, 0, im, statement_select);
      update_version (sts.select_image_versions (),
                      im,
                      sts.select_image_bindings ());
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += "\n";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        sts.connection (),
        query_statement_name,
        text,
        true,
        true,
        q.parameter_types (),
        q.parameter_count (),
        q.parameters_binding (),
        imb));

    st->execute ();
    st->deallocate ();

    shared_ptr< odb::polymorphic_object_result_impl<object_type> > r (
      new (shared) pgsql::polymorphic_object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::employee, id_pgsql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      erase_query_statement_name,
      text,
      q.parameter_types (),
      q.parameter_count (),
      q.parameters_binding ());

    return st.execute ();
  }

  // contractor
  //

  const char access::object_traits_impl< ::contractor, id_pgsql >::
  persist_statement_name[] = "persist_contractor";

  const char* const access::object_traits_impl< ::contractor, id_pgsql >::
  find_statement_names[] =
  {
    "find_0_contractor",
    "find_1_contractor"
  };

  const char access::object_traits_impl< ::contractor, id_pgsql >::
  update_statement_name[] = "update_contractor";

  const char access::object_traits_impl< ::contractor, id_pgsql >::
  erase_statement_name[] = "erase_contractor";

  const char access::object_traits_impl< ::contractor, id_pgsql >::
  query_statement_name[] = "query_contractor";

  const char access::object_traits_impl< ::contractor, id_pgsql >::
  erase_query_statement_name[] = "erase_query_contractor";

  const unsigned int access::object_traits_impl< ::contractor, id_pgsql >::
  persist_statement_types[] =
  {
    pgsql::int8_oid,
    pgsql::text_oid
  };

  const unsigned int access::object_traits_impl< ::contractor, id_pgsql >::
  find_statement_types[] =
  {
    pgsql::int8_oid
  };

  const unsigned int access::object_traits_impl< ::contractor, id_pgsql >::
  update_statement_types[] =
  {
    pgsql::text_oid,
    pgsql::int8_oid
  };

  struct access::object_traits_impl< ::contractor, id_pgsql >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      pgsql::connection&,
      image_type&,
      id_image_type&,
      pgsql::binding&,
      pgsql::binding&,
      pgsql::native_binding&,
      const unsigned int*)
    {
    }
  };

  bool access::object_traits_impl< ::contractor, id_pgsql >::
  grow (image_type& i,
        bool* t,
        std::size_t d)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // person base
    //
    if (--d != 0)
    {
      if (base_traits::grow (*i.base, t + 1UL))
        i.base->version++;
    }

    // email_
    //
    if (t[0UL])
    {
      i.email_value.capacity (i.email_size);
      grew = true;
    }

    return grew;
  }

  void access::object_traits_impl< ::contractor, id_pgsql >::
  bind (pgsql::bind* b,
        const pgsql::bind* id,
        std::size_t id_size,
        image_type& i,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    std::size_t n (0);

    // id_
    //
    if (sk == statement_insert)
    {
      if (id != 0)
        std::memcpy (&b[n], id, id_size * sizeof (id[0]));
      n += id_size;
    }

    // email_
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.email_value.data ();
    b[n].capacity = i.email_value.capacity ();
    b[n].size = &i.email_size;
    b[n].is_null = &i.email_null;
    n++;

    // id_
    //
    if (sk == statement_update)
    {
      if (id != 0)
        std::memcpy (&b[n], id, id_size * sizeof (id[0]));
      n += id_size;
    }

    // person base
    //
    if (sk == statement_select)
      base_traits::bind (b + n, *i.base, sk);
  }

  bool access::object_traits_impl< ::contractor, id_pgsql >::
  init (image_type& i,
        const object_type& o,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    bool grew (false);

    // email_
    //
    {
      ::std::string const& v =
        o.email_;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.email_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.email_value,
        size,
        is_null,
        v);
      i.email_null = is_null;
      i.email_size = size;
      grew = grew || (cap != i.email_value.capacity ());
    }

    return grew;
  }

  void access::object_traits_impl< ::contractor, id_pgsql >::
  init (object_type& o,
        const image_type& i,
        database* db,
        std::size_t d)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // person base
    //
    if (--d != 0)
      base_traits::init (o, *i.base, db);

    // email_
    //
    {
      ::std::string& v =
        o.email_;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.email_value,
        i.email_size,
        i.email_null);
    }
  }

  const access::object_traits_impl< ::contractor, id_pgsql >::info_type
  access::object_traits_impl< ::contractor, id_pgsql >::info (
    typeid (::contractor),
    &object_traits_impl< ::person, id_pgsql >::info,
    0,
    "contractor",
    &odb::create_impl< ::contractor >,
    &odb::dispatch_impl< ::contractor, id_pgsql >,
    &statements_type::delayed_loader);

  static const access::object_traits_impl< ::contractor, id_pgsql >::entry_type
  polymorphic_entry_for_contractor;

  const char access::object_traits_impl< ::contractor, id_pgsql >::persist_statement[] =
  "INSERT INTO \"inh_poly_contractor\" "
  "(\"id\", "
  "\"email\") "
  "VALUES "
  "($1, $2)";

  const char* const access::object_traits_impl< ::contractor, id_pgsql >::find_statements[] =
  {
    "SELECT "
    "\"inh_poly_contractor\".\"email\", "
    "\"inh_poly_person\".\"id\", "
    "\"inh_poly_person\".\"typeid\", "
    "\"inh_poly_person\".\"first\", "
    "\"inh_poly_person\".\"last\" "
    "FROM \"inh_poly_contractor\" "
    "LEFT JOIN \"inh_poly_person\" ON \"inh_poly_person\".\"id\"=\"inh_poly_contractor\".\"id\" "
    "WHERE \"inh_poly_contractor\".\"id\"=$1",

    "SELECT "
    "\"inh_poly_contractor\".\"email\" "
    "FROM \"inh_poly_contractor\" "
    "WHERE \"inh_poly_contractor\".\"id\"=$1"
  };

  const std::size_t access::object_traits_impl< ::contractor, id_pgsql >::find_column_counts[] =
  {
    5UL,
    1UL
  };

  const char access::object_traits_impl< ::contractor, id_pgsql >::update_statement[] =
  "UPDATE \"inh_poly_contractor\" "
  "SET "
  "\"email\"=$1 "
  "WHERE \"id\"=$2";

  const char access::object_traits_impl< ::contractor, id_pgsql >::erase_statement[] =
  "DELETE FROM \"inh_poly_contractor\" "
  "WHERE \"id\"=$1";

  const char access::object_traits_impl< ::contractor, id_pgsql >::query_statement[] =
  "SELECT\n"
  "\"inh_poly_contractor\".\"email\",\n"
  "\"inh_poly_person\".\"id\",\n"
  "\"inh_poly_person\".\"typeid\",\n"
  "\"inh_poly_person\".\"first\",\n"
  "\"inh_poly_person\".\"last\"\n"
  "FROM \"inh_poly_contractor\"\n"
  "LEFT JOIN \"inh_poly_person\" ON \"inh_poly_person\".\"id\"=\"inh_poly_contractor\".\"id\"";

  const char access::object_traits_impl< ::contractor, id_pgsql >::erase_query_statement[] =
  "DELETE FROM \"inh_poly_contractor\"";

  const char access::object_traits_impl< ::contractor, id_pgsql >::table_name[] =
  "\"inh_poly_contractor\"";

  void access::object_traits_impl< ::contractor, id_pgsql >::
  persist (database& db, object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    using namespace pgsql;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_persist, db, &obj, 0);
        return;
      }
    }

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    if (top)
      callback (db,
                static_cast<const object_type&> (obj),
                callback_event::pre_persist);

    base_traits::persist (db, obj, false, false);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());
    const binding& idb (sts.id_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (idb.version != sts.insert_id_binding_version () ||
        im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, idb.bind, idb.count, im, statement_insert);
      sts.insert_id_binding_version (idb.version);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    if (top)
      callback (db,
                static_cast<const object_type&> (obj),
                callback_event::post_persist);
  }

  void access::object_traits_impl< ::contractor, id_pgsql >::
  update (database& db, const object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    using namespace pgsql;
    using pgsql::update_statement;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_update, db, &obj, 0);
        return;
      }
    }

    if (top)
      callback (db, obj, callback_event::pre_update);

    pgsql::transaction& tr (pgsql::transaction::current ());
    pgsql::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    base_traits::update (db, obj, false, false);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    const binding& idb (sts.id_image_binding ());
    binding& imb (sts.update_image_binding ());
    if (idb.version != sts.update_id_binding_version () ||
        im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, idb.bind, idb.count, im, statement_update);
      sts.update_id_binding_version (idb.version);
      sts.update_image_version (im.version);
      imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    if (top)
    {
      callback (db, obj, callback_event::post_update);
      pointer_cache_traits::update (db, obj);
    }
  }

  void access::object_traits_impl< ::contractor, id_pgsql >::
  erase (database& db, const id_type& id, bool top, bool dyn)
  {
    using namespace pgsql;

    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    if (dyn)
    {
      discriminator_type d;
      root_traits::discriminator_ (sts.root_statements (), id, &d);

      if (d != info.discriminator)
      {
        const info_type& pi (root_traits::map->find (d));

        if (!pi.derived (info))
          throw object_not_persistent ();

        pi.dispatch (info_type::call_erase, db, 0, &id);
        return;
      }
    }

    if (top)
    {
      id_image_type& i (sts.id_image ());
      init (i, id);

      binding& idb (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || idb.version == 0)
      {
        bind (idb.bind, i);
        sts.id_image_version (i.version);
        idb.version++;
      }
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    base_traits::erase (db, id, false, false);

    if (top)
      pointer_cache_traits::erase (db, id);
  }

  void access::object_traits_impl< ::contractor, id_pgsql >::
  erase (database& db, const object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_erase, db, &obj, 0);
        return;
      }
    }

    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj), true, false);
    callback (db, obj, callback_event::post_erase);
  }

  access::object_traits_impl< ::contractor, id_pgsql >::pointer_type
  access::object_traits_impl< ::contractor, id_pgsql >::
  find (database& db, const id_type& id)
  {
    using namespace pgsql;

    {
      root_traits::pointer_type rp (pointer_cache_traits::find (db, id));

      if (!root_traits::pointer_traits::null_ptr (rp))
        return
          root_traits::pointer_traits::dynamic_pointer_cast<object_type> (rp);
    }

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());
    root_statements_type& rsts (sts.root_statements ());

    statements_type::auto_lock l (rsts);
    root_traits::discriminator_type d;

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
      d = root_traits::discriminator (rsts.image ());
    }
    else
      root_traits::discriminator_ (rsts, id, &d);

    const info_type& pi (
      d == info.discriminator ? info : root_traits::map->find (d));

    root_traits::pointer_type rp (pi.create ());
    pointer_type p (
      root_traits::pointer_traits::static_pointer_cast<object_type> (rp));
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, rp));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement (depth));
      ODB_POTENTIALLY_UNUSED (st);

      callback_event ce (callback_event::pre_load);
      pi.dispatch (info_type::call_callback, db, &obj, &ce);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);

      if (&pi != &info)
      {
        std::size_t d (depth);
        pi.dispatch (info_type::call_load, db, &obj, &d);
      }

      rsts.load_delayed (0);
      l.unlock ();
      ce = callback_event::post_load;
      pi.dispatch (info_type::call_callback, db, &obj, &ce);
      pointer_cache_traits::load (ig.position ());
    }
    else
      rsts.delay_load (id, obj, ig.position (), pi.delayed_loader);

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::contractor, id_pgsql >::
  find (database& db, const id_type& id, object_type& obj, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (dyn);

    using namespace pgsql;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        return pi.dispatch (info_type::call_find, db, &obj, &id);
      }
    }

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());
    root_statements_type& rsts (sts.root_statements ());

    statements_type::auto_lock l (rsts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement (depth));
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    rsts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::contractor, id_pgsql >::
  reload (database& db, object_type& obj, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (dyn);

    using namespace pgsql;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        return pi.dispatch (info_type::call_reload, db, &obj, 0);
      }
    }

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());
    root_statements_type& rsts (sts.root_statements ());

    statements_type::auto_lock l (rsts);

    const id_type& id  (
      obj.id_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement (depth));
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    rsts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::contractor, id_pgsql >::
  find_ (statements_type& sts,
         const id_type* id,
         std::size_t d)
  {
    using namespace pgsql;

    if (d == depth)
    {
      id_image_type& i (sts.id_image ());
      init (i, *id);

      binding& idb (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || idb.version == 0)
      {
        bind (idb.bind, i);
        sts.id_image_version (i.version);
        idb.version++;
      }
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding (d));

    if (imb.version == 0 ||
        check_version (sts.select_image_versions (), im))
    {
      bind (imb.bind, 0, 0, im, statement_select);
      update_version (sts.select_image_versions (),
                      im,
                      sts.select_image_bindings ());
    }

    select_statement& st (sts.find_statement (d));

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated (), d))
        im.version++;

      if (check_version (sts.select_image_versions (), im))
      {
        bind (imb.bind, 0, 0, im, statement_select);
        update_version (sts.select_image_versions (),
                        im,
                        sts.select_image_bindings ());
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::contractor, id_pgsql >::
  load_ (statements_type& sts,
         object_type& obj,
         bool reload,
         std::size_t d)
  {
    ODB_POTENTIALLY_UNUSED (reload);

    if (--d != 0)
      base_traits::load_ (sts.base_statements (), obj, reload);
  }

  void access::object_traits_impl< ::contractor, id_pgsql >::
  load_ (database& db, root_type& r, std::size_t d)
  {
    using namespace pgsql;

    object_type& obj (static_cast<object_type&> (r));
    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    d = depth - d;

    if (!find_ (sts, 0, d))
      throw object_not_persistent ();

    select_statement& st (sts.find_statement (d));
    ODB_POTENTIALLY_UNUSED (st);

    init (obj, sts.image (), &db, d);
    load_ (sts, obj, false, d);
  }

  result< access::object_traits_impl< ::contractor, id_pgsql >::object_type >
  access::object_traits_impl< ::contractor, id_pgsql >::
  query (database&, const query_base_type& q)
  {
    using namespace pgsql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding (depth));

    if (imb.version == 0 ||
        check_version (sts.select_image_versions (), im))
    {
      bind (imb.bind, 0, 0, im, statement_select);
      update_version (sts.select_image_versions (),
                      im,
                      sts.select_image_bindings ());
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += "\n";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        sts.connection (),
        query_statement_name,
        text,
        true,
        true,
        q.parameter_types (),
        q.parameter_count (),
        q.parameters_binding (),
        imb));

    st->execute ();
    st->deallocate ();

    shared_ptr< odb::polymorphic_object_result_impl<object_type> > r (
      new (shared) pgsql::polymorphic_object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::contractor, id_pgsql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      erase_query_statement_name,
      text,
      q.parameter_types (),
      q.parameter_count (),
      q.parameters_binding ());

    return st.execute ();
  }
}

#include <odb/post.hxx>
