This example shows how to generate and use a database schema that is embedded
into the application rather than stored as a separate SQL file.

The example consists of the following files:

person.hxx
  Header file defining the 'person' persistent class.

person-odb.hxx
person-odb.ixx
person-odb.cxx
  These files contain the database support code as well as the embedded
  database schema for the person.hxx header. They are generated by the ODB
  compiler from person.hxx using the following command line:

  odb -d <database> --generate-schema --schema-format embedded \
  --generate-query person.hxx

  Where <database> stands for the database system we are using, for example,
  'mysql'.

  The --generate-schema option requests the generation of the database schema.
  The --schema-format option is used to instruct the ODB compiler to embed the
  schema into the generated C++ files. It is also possible to generate the
  schema creation code into a separate source file by passing the 'separate'
  value instead of 'embedded' to the --schema-format option. This is primarily
  useful if you want to place the schema creation functionality into a
  separate program or library.

database.hxx
  Contains the create_database() function which instantiates the concrete
  database class corresponding to the database system we are using.

driver.cxx
  Driver for the example. It includes the person.hxx and person-odb.hxx
  headers to gain access to the persistent classes and their database support
  code. It also includes database.hxx for the create_database() function
  declaration.

  In main() the driver first calls create_database() to obtain the database
  instance. It then uses the ODB schema catalog to create the database
  schema. During this step the generated code issues a number of SQL
  statements that drop and create necessary database tables, etc.

  After the database schema is ready, the driver persists a number of 'person'
  objects, performs a database query, and prints the information about the
  returned objects.

To compile and link the example manually from the command line we can use
the following commands (using  MySQL as an example; replace 'c++' with your
C++ compiler name):

c++ -c person-odb.cxx
c++ -DDATABASE_MYSQL -c driver.cxx
c++ -o driver driver.o person-odb.o -lodb-mysql -lodb

To run the driver, using MySQL as an example, we can execute the following
command:

./driver --user odb_test --database odb_test

Here we use 'odb_test' as the database login and also 'odb_test' as the
database name.
