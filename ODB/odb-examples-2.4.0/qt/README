This example shows how to persist objects that use Qt smart pointers,
containers, and value types with the help of the Qt profile library
(libodb-qt).

The example consists of the following files:

employee.hxx
  Header file defining the 'employee' and 'employer' persistent classes.
  We use QSharedPointer/QWeakPointer smart pointers provided by Qt (as
  well as their lazy versions provided by the Qt profile library) to
  establish a bidirectional employee-employer relationship. The QList
  type is used to store the collection of employees employed by the
  employer. We also use the QDateTime type to store the employee's date
  of birth and QString to store the employee's first and last name. While
  the employee's object id is QUuid and a QSet instance keeps track of
  the employee's email addresses. Finally we use QByteArray to store the
  employee's public key.

employee-odb.hxx
employee-odb.ixx
employee-odb.cxx
employee.sql
  The first three files contain the database support code and the last file
  contains the database schema for the employee.hxx header.

  These files are generated by the ODB compiler from employee.hxx using the
  following command line:

  odb -d <database> --profile qt --generate-schema --generate-query \
   --generate-session employee.hxx

  Where <database> stands for the database system we are using, for example,
  'mysql'.

  The -p option is used to instruct the ODB compiler to load the Qt profile.
  The --generate-session option is used to enable session support for all
  the persistent classes in employee.hxx.

database.hxx
  Contains the createDatabase() function which instantiates the concrete
  database class corresponding to the database system we are using.

driver.cxx
  Driver for the example. It includes the employee.hxx and employee-odb.hxx
  headers to gain access to the persistent classes and their database support
  code. It also includes database.hxx for the createDatabase() function
  declaration.

  In main() the driver first calls createDatabase() to obtain the database
  instance. It then creates a number of 'Employee' and 'Employer' objects and
  persists them in the database. The next transaction loads all the employees
  of a particular employer using the employee-employer relationship. Finally,
  the driver performs a database query which uses data member of the Qt
  QString and QDate types in its criterion.

To compile and link the example manually from the command line we can use
the following commands (using  MySQL as an example; replace 'c++' with your
C++ compiler name):

c++ -c employee-odb.cxx
c++ -DDATABASE_MYSQL -c driver.cxx
c++ -o driver driver.o employee-odb.o -lodb-qt -lodb-mysql -lodb -lQtCore

To run the example we may first need to create the database schema (for some
database systems, such as SQLite, the schema is embedded into the generated
code which makes this step unnecessary). Using MySQL as an example, this
can be achieved with the following command:

mysql --user=odb_test --database=odb_test < employee.sql

Here we use 'odb_test' as the database login and also 'odb_test' as the
database name.

Once the database schema is ready, we can run the example (using MySQL as
the database):

./driver --user odb_test --database odb_test
