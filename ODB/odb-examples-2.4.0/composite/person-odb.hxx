// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef PERSON_ODB_HXX
#define PERSON_ODB_HXX

#include <odb/version.hxx>

#if (ODB_VERSION != 20400UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include "person.hxx"

#include <memory>
#include <cstddef>
#include <utility>

#include <odb/core.hxx>
#include <odb/traits.hxx>
#include <odb/callback.hxx>
#include <odb/wrapper-traits.hxx>
#include <odb/pointer-traits.hxx>
#include <odb/container-traits.hxx>
#include <odb/no-op-cache-traits.hxx>
#include <odb/result.hxx>
#include <odb/simple-object-result.hxx>

#include <odb/details/unused.hxx>
#include <odb/details/shared-ptr.hxx>

namespace odb
{
  // person
  //
  template <>
  struct class_traits< ::person >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::person >
  {
    public:
    typedef ::person object_type;
    typedef ::person* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::email_address id_type;

    static const bool auto_id = false;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };
}

#include <odb/details/buffer.hxx>

#include <odb/pgsql/version.hxx>
#include <odb/pgsql/forward.hxx>
#include <odb/pgsql/binding.hxx>
#include <odb/pgsql/pgsql-types.hxx>
#include <odb/pgsql/query.hxx>

namespace odb
{
  // basic_name
  //
  template <>
  class access::composite_value_traits< ::basic_name, id_pgsql >
  {
    public:
    typedef ::basic_name value_type;

    struct image_type
    {
      // first_
      //
      details::buffer first_value;
      std::size_t first_size;
      bool first_null;

      // last_
      //
      details::buffer last_value;
      std::size_t last_size;
      bool last_null;
    };

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static bool
    init (image_type&,
          const value_type&,
          pgsql::statement_kind);

    static void
    init (value_type&,
          const image_type&,
          database*);

    static bool
    get_null (const image_type&);

    static void
    set_null (image_type&,
              pgsql::statement_kind);

    static const std::size_t column_count = 2UL;
  };

  // name_extras
  //
  template <>
  class access::composite_value_traits< ::name_extras, id_pgsql >
  {
    public:
    typedef ::name_extras value_type;

    struct image_type
    {
      // nickname_
      //
      details::buffer nickname_value;
      std::size_t nickname_size;
      bool nickname_null;
    };

    // aliases_
    //
    struct aliases_traits
    {
      typedef ::basic_names container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::index_type index_type;
      typedef container_traits_type::value_type value_type;

      typedef ordered_functions<index_type, value_type> functions_type;
      typedef pgsql::container_statements< aliases_traits > statements_type;

      struct data_image_type
      {
        // index
        //
        long long index_value;
        bool index_null;

        // value
        //
        composite_value_traits< value_type, id_pgsql >::image_type value_value;

        std::size_t version;
      };

      static void
      bind (pgsql::bind*,
            const pgsql::bind* id,
            std::size_t id_size,
            data_image_type&);

      static void
      grow (data_image_type&,
            bool*);

      static void
      init (data_image_type&,
            index_type*,
            const value_type&);

      static void
      init (index_type&,
            value_type&,
            const data_image_type&,
            database*);

      static void
      insert (index_type, const value_type&, void*);

      static bool
      select (index_type&, value_type&, void*);

      static void
      delete_ (void*);

      static void
      persist (const container_type&,
               statements_type&);

      static void
      load (container_type&,
            statements_type&);

      static void
      update (const container_type&,
              statements_type&);

      static void
      erase (statements_type&);
    };

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static bool
    init (image_type&,
          const value_type&,
          pgsql::statement_kind);

    static void
    init (value_type&,
          const image_type&,
          database*);

    static const std::size_t column_count = 1UL;
  };

  // name
  //
  template <>
  class access::composite_value_traits< ::name, id_pgsql >
  {
    public:
    typedef ::name value_type;

    struct image_type: composite_value_traits< ::basic_name, id_pgsql >::image_type
    {
      // title_
      //
      details::buffer title_value;
      std::size_t title_size;
      bool title_null;

      // extras_
      //
      composite_value_traits< ::name_extras, id_pgsql >::image_type extras_value;
    };

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static bool
    init (image_type&,
          const value_type&,
          pgsql::statement_kind);

    static void
    init (value_type&,
          const image_type&,
          database*);

    static const std::size_t column_count = 4UL;
  };

  // phone_numbers
  //
  template <>
  class access::composite_value_traits< ::phone_numbers, id_pgsql >
  {
    public:
    typedef ::phone_numbers value_type;

    struct image_type
    {
      // first
      //
      details::buffer first_value;
      std::size_t first_size;
      bool first_null;

      // second
      //
      details::buffer second_value;
      std::size_t second_size;
      bool second_null;
    };

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static bool
    init (image_type&,
          const value_type&,
          pgsql::statement_kind);

    static void
    init (value_type&,
          const image_type&,
          database*);

    static bool
    get_null (const image_type&);

    static void
    set_null (image_type&,
              pgsql::statement_kind);

    static const std::size_t column_count = 2UL;
  };

  // email_address
  //
  template <>
  class access::composite_value_traits< ::email_address, id_pgsql >
  {
    public:
    typedef ::email_address value_type;

    struct image_type
    {
      // recipient_
      //
      details::buffer recipient_value;
      std::size_t recipient_size;
      bool recipient_null;

      // domain_
      //
      details::buffer domain_value;
      std::size_t domain_size;
      bool domain_null;
    };

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static bool
    init (image_type&,
          const value_type&,
          pgsql::statement_kind);

    static void
    init (value_type&,
          const image_type&,
          database*);

    static bool
    get_null (const image_type&);

    static void
    set_null (image_type&,
              pgsql::statement_kind);

    static const std::size_t column_count = 2UL;
  };

  // person
  //
  template <typename A>
  struct query_columns< ::person, id_pgsql, A >
  {
    // email
    //
    struct email_class_
    {
      email_class_ ()
      {
      }

      // recipient
      //
      typedef
      pgsql::query_column<
        pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::query_type,
        pgsql::id_string >
      recipient_type_;

      static const recipient_type_ recipient;

      // domain
      //
      typedef
      pgsql::query_column<
        pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::query_type,
        pgsql::id_string >
      domain_type_;

      static const domain_type_ domain;
    };

    static const email_class_ email;

    // name
    //
    struct name_class_
    {
      name_class_ ()
      {
      }

      // first
      //
      typedef
      pgsql::query_column<
        pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::query_type,
        pgsql::id_string >
      first_type_;

      static const first_type_ first;

      // last
      //
      typedef
      pgsql::query_column<
        pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::query_type,
        pgsql::id_string >
      last_type_;

      static const last_type_ last;

      // title
      //
      typedef
      pgsql::query_column<
        pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::query_type,
        pgsql::id_string >
      title_type_;

      static const title_type_ title;

      // extras
      //
      struct extras_class_1_
      {
        extras_class_1_ ()
        {
        }

        // nickname
        //
        typedef
        pgsql::query_column<
          pgsql::value_traits<
            ::std::string,
            pgsql::id_string >::query_type,
          pgsql::id_string >
        nickname_type_;

        static const nickname_type_ nickname;
      };

      static const extras_class_1_ extras;
    };

    static const name_class_ name;

    // phone
    //
    struct phone_class_
    {
      phone_class_ ()
      {
      }

      // first
      //
      typedef
      pgsql::query_column<
        pgsql::value_traits<
          ::std::basic_string< char >,
          pgsql::id_string >::query_type,
        pgsql::id_string >
      first_type_;

      static const first_type_ first;

      // second
      //
      typedef
      pgsql::query_column<
        pgsql::value_traits<
          ::std::basic_string< char >,
          pgsql::id_string >::query_type,
        pgsql::id_string >
      second_type_;

      static const second_type_ second;
    };

    static const phone_class_ phone;
  };

  template <typename A>
  const typename query_columns< ::person, id_pgsql, A >::email_class_::recipient_type_
  query_columns< ::person, id_pgsql, A >::email_class_::
  recipient (A::table_name, "\"email_recipient\"", 0);

  template <typename A>
  const typename query_columns< ::person, id_pgsql, A >::email_class_::domain_type_
  query_columns< ::person, id_pgsql, A >::email_class_::
  domain (A::table_name, "\"email_domain\"", 0);

  template <typename A>
  const typename query_columns< ::person, id_pgsql, A >::email_class_
  query_columns< ::person, id_pgsql, A >::email;

  template <typename A>
  const typename query_columns< ::person, id_pgsql, A >::name_class_::first_type_
  query_columns< ::person, id_pgsql, A >::name_class_::
  first (A::table_name, "\"name_first\"", 0);

  template <typename A>
  const typename query_columns< ::person, id_pgsql, A >::name_class_::last_type_
  query_columns< ::person, id_pgsql, A >::name_class_::
  last (A::table_name, "\"name_last\"", 0);

  template <typename A>
  const typename query_columns< ::person, id_pgsql, A >::name_class_::title_type_
  query_columns< ::person, id_pgsql, A >::name_class_::
  title (A::table_name, "\"name_title\"", 0);

  template <typename A>
  const typename query_columns< ::person, id_pgsql, A >::name_class_::extras_class_1_::nickname_type_
  query_columns< ::person, id_pgsql, A >::name_class_::extras_class_1_::
  nickname (A::table_name, "\"name_extras_nickname\"", 0);

  template <typename A>
  const typename query_columns< ::person, id_pgsql, A >::name_class_::extras_class_1_
  query_columns< ::person, id_pgsql, A >::name_class_::extras;

  template <typename A>
  const typename query_columns< ::person, id_pgsql, A >::name_class_
  query_columns< ::person, id_pgsql, A >::name;

  template <typename A>
  const typename query_columns< ::person, id_pgsql, A >::phone_class_::first_type_
  query_columns< ::person, id_pgsql, A >::phone_class_::
  first (A::table_name, "\"phone_first\"", 0);

  template <typename A>
  const typename query_columns< ::person, id_pgsql, A >::phone_class_::second_type_
  query_columns< ::person, id_pgsql, A >::phone_class_::
  second (A::table_name, "\"phone_second\"", 0);

  template <typename A>
  const typename query_columns< ::person, id_pgsql, A >::phone_class_
  query_columns< ::person, id_pgsql, A >::phone;

  template <typename A>
  struct pointer_query_columns< ::person, id_pgsql, A >:
    query_columns< ::person, id_pgsql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::person, id_pgsql >:
    public access::object_traits< ::person >
  {
    public:
    struct id_image_type
    {
      composite_value_traits< ::email_address, id_pgsql >::image_type id_value;

      std::size_t version;
    };

    struct image_type
    {
      // email_
      //
      composite_value_traits< ::email_address, id_pgsql >::image_type email_value;

      // name_
      //
      composite_value_traits< ::person::name_type, id_pgsql >::image_type name_value;

      // phone_
      //
      composite_value_traits< ::phone_numbers, id_pgsql >::image_type phone_value;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    // aliases_
    //
    struct name_extras_aliases_traits: access::composite_value_traits< ::name_extras, id_pgsql >::aliases_traits
    {
      static const char select_name[];
      static const char insert_name[];
      static const char delete_name[];

      static const unsigned int insert_types[];

      static const std::size_t id_column_count = 2UL;
      static const std::size_t data_column_count = 5UL;

      static const bool versioned = false;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];
    };

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static void
    bind (pgsql::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          pgsql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef pgsql::object_statements<object_type> statements_type;

    typedef pgsql::query_base query_base_type;

    static const std::size_t column_count = 8UL;
    static const std::size_t id_column_count = 2UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, const object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static const char persist_statement_name[];
    static const char find_statement_name[];
    static const char update_statement_name[];
    static const char erase_statement_name[];
    static const char query_statement_name[];
    static const char erase_query_statement_name[];

    static const unsigned int persist_statement_types[];
    static const unsigned int find_statement_types[];
    static const unsigned int update_statement_types[];

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::person, id_common >:
    public access::object_traits_impl< ::person, id_pgsql >
  {
  };

  // person
  //
}

#include "person-odb.ixx"

#include <odb/post.hxx>

#endif // PERSON_ODB_HXX
