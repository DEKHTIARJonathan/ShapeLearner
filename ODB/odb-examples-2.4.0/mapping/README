This examples shows how to customize the mapping between C++ value types
and database types. The example changes the default mapping for the 'bool'
type which is now stored in the database as the "true" or "false" string.
It also maps the user-defined 'date' type to a suitable database date type.

The example consists of the following files:

person.hxx
  Header file defining the 'date' value type and the 'person' persistent
  class. It also uses the ODB value type pragma to map 'bool' to the
  'VARCHAR(5)' database type and 'date' to the 'DATE' database type.

traits.hxx
traits-mysql.hxx
traits-sqlite.hxx
  ODB 'value_traits' template specializations for the 'bool' and 'date'
  types. These specializations implement conversion between these types
  and their database counterparts.

person-odb.hxx
person-odb.ixx
person-odb.cxx
person.sql
  The first three files contain the database support code and the last file
  contains the database schema for the person.hxx header.

  These files are generated by the ODB compiler from person.hxx using the
  following command line:

  odb -d <database> --generate-query --generate-schema \
  --hxx-prologue "#include \"traits.hxx\"" person.hxx

  Where <database> stands for the database system we are using, for example,
  'mysql'.

  The --hxx-prologue option included the traits.hxx header at the beginning
  of the generated person-odb.hxx file. This makes the 'value_traits'
  specializations defined in traits.hxx known to the generated database
  support code.

database.hxx
  Contains the create_database() function which instantiates the concrete
  database class corresponding to the database system we are using.

driver.cxx
  Driver for the example. It includes the person.hxx and person-odb.hxx
  headers to gain access to the persistent classes and their database support
  code. It also includes database.hxx for the create_database() function
  declaration.

  In main() the driver first calls create_database() to obtain the database
  instance. It then persists a number of 'person' objects in the database
  and executes a query to find objects matching certain criteria.

To compile and link the example manually from the command line we can use
the following commands (using  MySQL as an example; replace 'c++' with your
C++ compiler name):

c++ -DDATABASE_MYSQL -c person-odb.cxx
c++ -DDATABASE_MYSQL -c driver.cxx
c++ -o driver driver.o person-odb.o -lodb-mysql -lodb

To run the example we may first need to create the database schema (for some
database systems, such as SQLite, the schema is embedded into the generated
code which makes this step unnecessary). Using MySQL as an example, this
can be achieved with the following command:

mysql --user=odb_test --database=odb_test < person.sql

Here we use 'odb_test' as the database login and also 'odb_test' as the
database name.

Once the database schema is ready, we can run the example (using MySQL as
the database):

./driver --user odb_test --database odb_test
