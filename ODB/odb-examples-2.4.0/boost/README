This example shows how to persist objects that use Boost smart pointers,
containers, and value types with the help of the Boost profile library
(libodb-boost).

The example consists of the following files:

employee.hxx
  Header file defining the 'employee' and 'employer' persistent classes.
  We use shared_ptr/weak_ptr smart pointers provided by Boost (as well
  as their lazy versions provided by the Boost profile library) to
  establish a bidirectional employee-employer relationship. We also use
  the boost::gregorian::date type to store the employee's date of birth
  and the boost::unordered_set container to keep track of the employee's
  email addresses. The employee's object id is boost::uuids::uuid. Finally,
  we use boost::optional for the optional middle name. If the middle name
  is not present, it will be represented in the database as a NULL value.

employee-odb.hxx
employee-odb.ixx
employee-odb.cxx
employee.sql
  The first three files contain the database support code and the last file
  contains the database schema for the employee.hxx header.

  These files are generated by the ODB compiler from employee.hxx using the
  following command line:

  odb -d <database> --profile boost --generate-schema --generate-query \
   --generate-session employee.hxx

  Where <database> stands for the database system we are using, for example,
  'mysql'.

  The -p option is used to instruct the ODB compiler to load the Boost
  profile. The --generate-session option is used to enable session support
  for all the persistent classes in employee.hxx.

database.hxx
  Contains the create_database() function which instantiates the concrete
  database class corresponding to the database system we are using.

driver.cxx
  Driver for the example. It includes the employee.hxx and employee-odb.hxx
  headers to gain access to the persistent classes and their database support
  code. It also includes database.hxx for the create_database() function
  declaration.

  In main() the driver first calls create_database() to obtain the database
  instance. It then creates a number of 'employee' and 'employer' objects and
  persists them in the database. The next transaction loads all the employees
  of a particular employer using the employee-employer relationship. Finally,
  the driver performs a few database queries which use data members of the
  various Boost value types in their criterion.

To compile and link the example manually from the command line we can use
the following commands (using  MySQL as an example; replace 'c++' with your
C++ compiler name):

c++ -c employee-odb.cxx
c++ -DDATABASE_MYSQL -c driver.cxx
c++ -o driver driver.o employee-odb.o -lodb-boost -lodb-mysql -lodb \
-lboost_date_time

To run the example we may first need to create the database schema (for some
database systems, such as SQLite, the schema is embedded into the generated
code which makes this step unnecessary). Using MySQL as an example, this
can be achieved with the following command:

mysql --user=odb_test --database=odb_test < employee.sql

Here we use 'odb_test' as the database login and also 'odb_test' as the
database name.

Once the database schema is ready, we can run the example (using MySQL as
the database):

./driver --user odb_test --database odb_test
